\section{Banco de Dados Relacionais}
\begin{frame}[t, allowframebreaks, fragile]{Banco de Dados Relacionais}
	\begin{itemize}
		\item Um aspecto importante da programação web é a habilidade de coletar, armazenar e recuperar
		diferentes formas de dados
		\begin{itemize}
			\item uma das formas mais populares são os \alert{bancos de dados relacionais}
		\end{itemize} 
% 		\item maioria banco de dados relacionais acessados através da Structured Query Language (SQL)
		\item Um banco de dados relacional é baseado entidades, denominadas \alert{tabelas}, no
		relacionamento, \alert{associações}, entre elas
		\item O contêiner fundamental em um banco de dados relacional é denominado de \alert{database} ou \alert{schema}
		\begin{itemize}
			\item podem incluir estruturas de dados, os dados propriamente ditos e permissões de acesso
		\end{itemize}  
		\framebreak
		\item Os dados são armazenados em \alert{tabelas} e as tabelas são divididas em \alert{linhas} e \alert{colunas}.
		Por exemplo:
		\begin{table}[tp] 
			\scriptsize 
			\caption{comment}
			\setlength{\tabcolsep}{8pt}
			\setlength{\extrarowheight}{2pt}   			
			\begin{tabular}{|l|l|} 
				\hline
				\textbf{post\_id} & \textbf{body}\\
				\hline
				1 & Ruby realmente é uma linguagem legal. \\
				\hline
				2 & Rails facilita bastante a criação de webapps. \\
				\hline
				2 & Concordo, Rails facilita bem mesmo. \\
				\hline
			\end{tabular}
		\end{table}
		\pagebreak
		\item Relacionamentos são estabelecidos entre tabelas para que a consistência dos dados
		seja mantida em qualquer situação e podem ser:
		\begin{itemize}
			\item um-para-um
			\item um-para-muitos
			\item muitos-para-muitos	
			\begin{columns}[t]
				\column{0.4\textwidth}
				\begin{table}[tp] 
					\scriptsize 
					\caption{comment}
					\setlength{\tabcolsep}{8pt}
					\setlength{\extrarowheight}{2pt}   			
					\begin{tabular}{|l|l|} 
						\hline
						\textbf{post\_id} & \textbf{body}\\
						\hline
						1 & Ruby realmente... \\
						\hline
						2 & Rails facilita... \\
						\hline
						2 & Concordo, ... \\
						\hline
					\end{tabular}
				\end{table}
				\column{0.6\textwidth}
				\begin{table}[tp] 
					\caption{post}
					\scriptsize 
					\setlength{\tabcolsep}{8pt}
					\setlength{\extrarowheight}{1pt}   			
					\begin{tabular}{|l|l|l|} 
						\hline
						\textbf{id} & \textbf{title} & \textbf{body} \\
						\hline
						\textbf{1} & A Linguagem Ruby & Ruby é legal. \\
						\hline
						\textbf{2} & O Framework Rais & O Rais facilita...\\
						\hline
					\end{tabular}
				\end{table}   		
			\end{columns}
		\end{itemize}  
	\end{itemize}
\end{frame}

\begin{frame}[allowframebreaks, t, fragile]{SQLite}
	\begin{itemize}
		\item O banco de dados que o Rails utiliza em diversos ambientes (desenvolvimento,
		teste e produção) é especificado em: \alert{config/database.yml}
	\end{itemize}
	
	\lstinputlisting[style=RubyInputStyle, firstline=7]{codigos/blog_1/config/database.yml}
	
	\begin{itemize}
 		\item Rails usa por padrão o SQLite como gerenciador padrão
		\begin{itemize}
			\item relacional, embutido, sem servidor, configuração zero,
			transacional, suporta SQL
		\end{itemize}
	\end{itemize}
	
	\begin{center}
		\alert{{\huge ATENÇÃO: SQLite não um banco de dados para produção !}}
	\end{center}
	
	\begin{itemize}
		\item Banco de dados de produção populares: \alert{MySQL} e \alert{PostgreSQL}
	\end{itemize}
\end{frame}
%

%%
% \begin{frame}[allowframebreaks, t, fragile]{Introdução à Linguagem SQL}
% 	\begin{itemize}
% 		\item SQL é um sigla para \textit{Structured Query Language}
% 		\item SQL é a linguagem padrão para manipulação de 
% 		dados em um banco de dados
% 		\item SQL é padronizado pelo \textit{American National Standard Institute} (ANSI)
% 		\begin{itemize}
% 			\item SQL:2008 é a última revisão da linguagem
% 		\end{itemize}
% 		\item As instruções da linguagem SQL podem ser subdivididas em:
% 		\begin{itemize}
% 			\item \textit{Data Manipulation Language} (DML) que engloba as instruções
% 			para consultar, inserir, atualizar e remover dados
% 			\item \textit{Data Definition Language} (DDL) que engloba as instruções
% 			para criar e remover banco de dados e objetos no mesmo
% 			\item \textit{Transaction Controls} que engloba as instruções 
% 			para efetivar ou desfazer transações
% 		\end{itemize}
% 		\item Embora exista o padrão ANSI SQL, existem várias versões ou dialetos 
% 		da linguagem fornecidos	por fabricantes de bancos de dados
% 	\end{itemize}
% \end{frame}
%%
% \begin{frame}[allowframebreaks, t, fragile]{Instruções Fundamentais da SQL}
% 	\begin{itemize}
% 		\item A instrução \alert{CREATE DATABASE} cria um banco de dados 
% 		especificado pelo usuário
% 		\begin{block}{codigos/database/sql-cria-db.sql}
% 			\lstinputlisting[language=SQL]{../codigos/database/sql-cria-db.sql}    
% 		\end{block}	  	
% 		\item A instrução \alert{DROP DATABASE} remove um banco de dados
% 		especificado pelo usuário
% 		\begin{block}{codigos/database/sql-remove-db.sql}
% 			\lstinputlisting[language=SQL]{../codigos/database/sql-cria-db.sql}    
% 		\end{block}	  	
% 		\item A instrução \alert{CREATE TABLE} cria uma tabela com o nome 
% 		especificado pelo usuário
% 		\begin{block}{codigos/database/sql-cria-tabela.sql}
% 			\lstinputlisting[language=SQL, basicstyle=\tiny\ttfamily]{../codigos/database/sql-cria-tabela.sql}    
% 		\end{block}	  	
% 	\end{itemize}
% \end{frame}
% %%
% \begin{frame}[allowframebreaks, t, fragile]{Atributos de Colunas e Tabelas}
% 	\begin{itemize}
% 		\item \alert{UNSIGNED}
% 		\begin{itemize}
% 			\item aplicado a colunas do tipo numérico
% 			\item valores negativos não permitidos
% 		\end{itemize}
% 		\item \alert{ZEROFILL}
% 		\begin{itemize}
% 			\item aplicado a colunas do tipo numérico
% 			\item faz com que os valores recuperados sejam preenchidos com zeros 
% 			à esquerda até alcançarem a largura de exibição da coluna
% 		\end{itemize}
% 		\item \alert{AUTO\_INCREMENT}
% 		\begin{itemize}
% 			\item aplicado a colunas do tipo inteiro
% 			\item usado para gerar sequencia de valores únicos sucessivos
% 			\item só poderá existir uma coluna deste tipo por tabela
% 			\item a coluna deverá ser indexada
% 			\item a coluna deverá ser definida como NOT NULL
% 		\end{itemize}
% 		\item \alert{NULL e NOT NULL}
% 		\begin{itemize}
% 			\item aplicado a todos os tipos de colunas
% 			\item indicam se a coluna pode ou não conter valores nulos (NULL)  	
% 		\end{itemize}
% 		\item \alert{CONSTRAINT}
% 		\begin{itemize}
% 			\item define um nome para as restrições de integridade de uma tabela
% 		\end{itemize}
% 		\item \alert{PRIMARY KEY}
% 		\begin{itemize}
% 			\item define a chave primária de uma tabela
% 		\end{itemize}
% 		\item \alert{FOREIGN KEY... REFERENCES}
% 		\begin{itemize}
% 			\item define as chaves estrangeiras de uma tabela
% 		\end{itemize}
% 		\item \alert{ON DELETE $|$ UPDATE RESTRICT}
% 		\begin{itemize}
% 			\item não permite a atualização ou remoção de uma linha da tabela referenciada 
% 			sem que seja efetuada antes a atualização ou remoção  das linhas correlacionadas a ela.
% 		\end{itemize}
% 		\item \alert{ON DELETE $|$ UPDATE SET NULL}
% 		\begin{itemize}
% 			\item A remoção/atualização de uma linha da tabela referenciada 
% 			implicará que todas as linhas na tabela filha, correlacionadas a ele, 
% 			terão a chave estrangeira correspondente atualizada para NULL.  
% 		\end{itemize}
% 		\item \alert{ON DELETE $|$ UPDATE CASCADE}
% 		\begin{itemize}
% 			\item A remoção/atualização de uma linha da tabela referenciada 
% 			implicará que todas as linhas na tabela filha, correlacionadas a ele, 
% 			serão removidas automaticamente
% 		\end{itemize}	
% 	\end{itemize}
% \end{frame}
% %%
% \begin{frame}[allowframebreaks, t, fragile]{Tipos de Dados}
% 	\begin{itemize}
% 		\item \alert{INT $|$ INTEGER [(M)] [UNSIGNED] [ZEROFILL]}
% 		\begin{itemize}
% 			\item inteiro (4 bytes)
% 			\item faixa: -2147483648 a -2147483648 (sinalizado)
% 			\item faixa: 4294967295 (não sinalizado)
% 		\end{itemize}
% 		\item \alert{DEC $|$ DECIMAL [(M[,D)] [UNSIGNED] [ZEROFILL]}
% 		\begin{itemize}
% 			\item decimais de ponto fixo
% 			\item M: número total de dígitos (precisão)
% 			\item D: número de dígitos após o ponto decimal (escala)
% 			\item valor máximo para M é 65 (padrão 10)
% 			\item valor máximo para D é 30 (padrão 0)
% 			\item NUMERIC é um sinônimo para DEC
% 		\end{itemize}
% 		\pagebreak
% 		\item \alert{DATE}
% 		\begin{itemize}
% 			\item data
% 			\item ‘1000-01-01’ a ‘9999-12-31’
% 			\item formato: ‘YYYY-MM-DD’
% 		\end{itemize}
% 		\item \alert{TIME}
% 		\begin{itemize}
% 			\item hora
% 			\item ‘-838:59:59’ a ‘838:59:59’
% 			\item formato: ‘HH:MM:SS’
% 		\end{itemize}
% 		\item \alert{DATETIME}
% 		\begin{itemize}
% 			\item combinação de data e hora
% 			\item ‘1000-01-01 00:00:00’ a ‘9999-12-31 23:59:59’
% 			\item formato: ‘YYYY-MM-DD HH:MM:SS’
% 		\end{itemize}
% 		\item \alert{CHAR(M)}
% 		\begin{itemize}
% 			\item cadeia de caracteres de tamanho fixo
% 			\item M: representa o número máximo de caracteres que podem ser armazenados na coluna
% 			\item M: 0 a 255 caracteres
% 		\end{itemize}
% 		\item \alert{VARCHAR(M)}
% 		\begin{itemize}
% 			\item cadeia de caracteres de tamanho variável
% 			\item M: representa o número de máximo de caracteres que podem ser armazenados
% 			\item M: 0 a 255 caracteres (antes da versão 5.0.3)
% 			\item M: 0 a 65535 caracteres (a partir da versão 5.0.3)
% 		\end{itemize}
% 		\pagebreak
% 		\item \alert{TEXT[(M)]}
% 		\begin{itemize}
% 			\item coluna to tipo texto
% 			\item M: 0 a65535		
% 		\end{itemize}
% 	\end{itemize}
% \end{frame}
% \begin{frame}[allowframebreaks, t, fragile]{Instruções Fundamentais da SQL}
% 	\begin{itemize}
% 		\item A instrução \alert{INSERT} insere linhas de dados em 
% 		uma tabela  
% 		\begin{block}{codigos/database/sql-insert-sintaxe.sql}
% 			\lstinputlisting[language=SQL]{../codigos/database/sql-insert-sintaxe.sql}    
% 		\end{block}	  	
% 		\item Valores devem ser listados na ordem em que aparecem na tabela
% 		\item Nomes das colunas na cláusula INSERT opcional, mas altamente
% 		recomendável
% 		\item Valores do tipo data e caractere devem ser colocados entre apóstrofes
% 		\begin{block}{codigos/database/sql-insert-exemplo.sql}
% 			\lstinputlisting[language=SQL]{../codigos/database/sql-insert-exemplo.sql}    
% 		\end{block}	  	
% 		\pagebreak
% 		\item A instrução \alert{UPDATE} atualiza linhas de dados em 
% 		uma tabela  
% 		\begin{block}{codigos/database/sql-update-sintaxe.sql}
% 			\lstinputlisting[language=SQL]{../codigos/database/sql-update-sintaxe.sql}    
% 		\end{block}	  	
% 		\item UPDATE atualiza mais de uma linha por vez, se necessário
% 		\item Linha ou linhas específicas são atualizadas quando a cláusula WHERE 
% 		é especificada
% 		\item Todas as linhas da tabela são atualizadas se a cláusula WHERE é omitida
% 		\begin{block}{codigos/database/sql-update-exemplo.sql}
% 			\lstinputlisting[language=SQL]{../codigos/database/sql-update-exemplo.sql}    
% 		\end{block}	  		
% 		\pagebreak
% 		\item A instrução \alert{DELETE} remove linhas de dados em 
% 		uma tabela  
% 		\begin{block}{codigos/database/sql-delete-sintaxe.sql}
% 			\lstinputlisting[language=SQL]{../codigos/database/sql-delete-sintaxe.sql}    
% 		\end{block}	  	
% 		\item Linha ou linhas específicas são removidas quando a cláusula WHERE é definida
% 		\item Todas as linhas da tabela são removidas se a cláusula WHERE é omitida
% 		\begin{block}{codigos/database/sql-delete-exemplo.sql}
% 			\lstinputlisting[language=SQL]{../codigos/database/sql-delete-exemplo.sql}    
% 		\end{block}	  		
% 		\pagebreak
% 		\item A instrução \alert{SELECT} consultar linhas de dados em 
% 		uma tabela  ou mais tabelas
% 		\begin{block}{codigos/database/sql-select-sintaxe.sql}
% 			\lstinputlisting[language=SQL]{../codigos/database/sql-select-sintaxe.sql}    
% 		\end{block}	  	
% 		\item A cláusula SELECT determina as colunas a serem mostradas na consulta (obrigatória)
% 		\item A cláusula FROM determina a origem dos dados exibidos na consulta (obrigatória)
% 		\item A cláusula WHERE seleciona as linhas que serão apresentadas na consulta (opcional)
% 		\pagebreak
% 		\begin{block}{codigos/database/sql-select-exemplo.sql}
% 			\lstinputlisting[language=SQL]{../codigos/database/sql-select-exemplo.sql}    
% 		\end{block}	  		
% 	\end{itemize}
% \end{frame}
% %%
% \begin{frame}[t, fragile]{Transações em SQL}
% 	\begin{itemize}
% 		\begin{block}{codigos/database/sql-transaction-sintaxe.sql}
% 			\lstinputlisting[language=SQL]{../codigos/database/sql-transaction-sintaxe.sql}    
% 		\end{block}	  	
% 		\item O comando START inicia uma transação
% 		\item O comando COMMIT efetiva a transação corrente e começa uma nova
% 		\item A cláusula WORK é opcional
% 		\item O comando ROLLBACK aborta uma transação corrente
% 	\end{itemize}
% \end{frame}
% %%
% \begin{frame}[t, fragile]{PHP Data Objects}
% 	\begin{itemize}
% 		\item PHP Data Objects (PDO) é uma extensão que fornece conexão PHP com banco dados de maneira uniforme
% 		\begin{itemize}
% 			\item permite aos desenvolvedores a criar um código mais portável entre diversos sistemas de banco de dados
% 			\item entretanto, PDO não provê nenhum mecanismo para padronizar extensões SQL de diferentes fornecedores
% 		\end{itemize}
% 		\item Cada fornecedor de banco de dados implementa um driver específico para o seu servidor
% 		\item PDO pode ser visto como uma camada de abstração de acesso a dados
% 		\begin{itemize}
% 			\item pode-se utilizar as mesmas funções de manipulação de dados independente do banco de dados que esteja sendo utilizado 
% 		\end{itemize}
% 	\end{itemize}
% \end{frame}
% %%
% \begin{frame}[t, fragile]{Conexão com o Banco de Dados MySQL}
% 	\begin{block}{codigos/database/pdoconexao.php}
% 		\lstinputlisting[language=PHP]{../codigos/database/pdoconexao.php}    
% 	\end{block}
% \end{frame}
% %%
% \begin{frame}[t, fragile]{Consulta Utilizando o PDO}
% 	\begin{block}{codigos/database/pdoconsulta.php}
% 		\lstinputlisting[language=PHP, basicstyle=\tiny\ttfamily]{../codigos/database/pdoconsulta.php}    
% 	\end{block}
% \end{frame}
% %%
% \begin{frame}[t, fragile]{Atualização de Dados Utilizando o PDO}
% 	\begin{block}{codigos/database/pdoconsulta.php}
% 		\lstinputlisting[language=PHP, basicstyle=\tiny\ttfamily]{../codigos/database/pdoinsercao.php}    
% 	\end{block}
% \end{frame}
% %%$
% \begin{frame}[t, fragile]{Biblioteca MySQL}
% 	\begin{itemize}
% 		\item \lstinline[language=PHP, basicstyle=\small]!mysql_connect()!
% 		\item \lstinline[language=PHP, basicstyle=\small]!mysql_select_db()!
% 		\item \lstinline[language=PHP, basicstyle=\small]!mysql_close()!
% 		\item \lstinline[language=PHP, basicstyle=\small]!mysql_query()!
% 		\item \lstinline[language=PHP, basicstyle=\small]!mysql_fetch_array()!
% 		\item \lstinline[language=PHP, basicstyle=\small]!mysql_num_rows()!
% 		\item \lstinline[language=PHP, basicstyle=\small]!mysql_error()!
% 	\end{itemize}
% \end{frame}
% %%
% \begin{frame}[t, fragile]{Conexão com Servidor de Banco de Dados}
% 	\lstinputlisting[language=PHP]{../codigos/database/mysqlconexao.php}
% \end{frame}
% %%
% \begin{frame}[t, fragile]{Selecão do Banco de Dados}
% 	\lstinputlisting[language=PHP]{../codigos/database/mysqlselecaodb.php}
% \end{frame}
% %%
% \begin{frame}[t, fragile]{Encerramento da Conexão}
% 	\lstinputlisting[language=PHP]{../codigos/database/mysqlencerracnx.php}
% \end{frame}
% %%
% \begin{frame}[t, fragile]{Envio de uma Consulta para o Banco de Dados}
% 	\lstinputlisting[language=PHP]{../codigos/database/mysqlconsulta.php}
% \end{frame}
% %%
% \begin{frame}[allowframebreaks, fragile, t]{Leitura de Linhas do Banco de Dados}
% 	\lstinputlisting[language=PHP]{../codigos/database/mysqlleitura.php}
% \end{frame}
% %%
% \begin{frame}[allowframebreaks, fragile, t]{Inserção de Linhas no Banco de Dados}
% 	\lstinputlisting[language=PHP]{../codigos/database/mysqlinsercao.php}
% \end{frame}
% %%
% \begin{frame}[allowframebreaks, fragile, t]{Atualização de Linhas no Banco de Dados}
% 	\lstinputlisting[language=PHP]{../codigos/database/mysqlatualizacao.php}
% \end{frame}
% %%
% \begin{frame}[allowframebreaks, fragile, t]{Remoção de Linhas no Banco de Dados}
% 	\lstinputlisting[language=PHP]{../codigos/database/mysqlremocao.php}
% \end{frame}
% %%
% \begin{frame}[allowframebreaks, fragile, t]{Exercícios}
% 	\begin{enumerate}
% 		\item Crie a tabela \alert{usuario} no banco de dados \alert{cadastro} para armazenar as informações do 
% 		formulário criado na aula anterior
% 		\item Desenvolva um script para inserir informações digitadas pelo usuário no banco de dados. Use
% 		a extensão PDO e a biblioteca MySQL.
% 		\item Desenvolva um script para mostrar todos os registros cadastrados em uma tabela. Use
% 		a extensão PDO e a biblioteca MySQL.
% 		\item Desenvolva um script para mostrar todos os registros cadastrados em uma tabela em que 
% 		o usuário possa escolher ou não as pessoas de um determinado sexo. Use
% 		a extensão PDO e a biblioteca MySQL.
% 	\end{itemize}
% \end{frame}
% %%
