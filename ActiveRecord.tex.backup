\begin{frame}[allowframebreaks, t, fragile]{Object-Relational Mapping}
	\begin{itemize}
		\item Um ORM \alert{preenche a lacuna} entre banco de dados relacionais e as linguagens de programação
			orientadas a objetos
			\item \alert{Simplifica} bastante a escrita de códigos para acessar o banco de dados.
		\item Tipicamente, comandos SQL são dados para criar e modificar tabelas em um
		banco de dados
		\item No Rails, o Model do MVC utiliza algum framework de ORM
	\end{itemize}	
\end{frame}

\begin{frame}[allowframebreaks, t, fragile]{Active Record}
	\begin{itemize}
		\item ActiveRecord é o nome do \alert{ORM padrão} do Rails?
		\vspace{15pt}
		\begin{columns}[t]
		\column{0.5\textwidth}
			\lstinputlisting[style=RubyInputStyle, caption=app/models/post.rb]{codigos/blog_1/app/models/post.rb}
		\column{0.5\textwidth}   		
			\alert{\Large Onde está código ?}
			\\
			\textcolor{Turquoise}{\Large R: Metaprogramação + Convenção}
		\end{columns}
		
		\item Para que \alert{"mágica"} ocorra:
		\begin{itemize}
			\item o ActiveRecord tem que saber como encontrar o banco de dados (ocorre via \alert{config/database.yml})
			\item \textbf{(Convenção)} existe uma \alert{tabela} com o \alert{nome no plural} da subclasse \verb|ActiveRecord::Base|
			\item \textbf{(Convenção)} espera-se que a tabela tenha uma chave primário denominada \alert{id}
		\end{itemize}
	\end{itemize}
\end{frame}

\begin{frame}[allowframebreaks, t, fragile]{Object-Relational Mapping}
	\begin{itemize}
		\item Um ORM \alert{preenche a lacuna} entre banco de dados relacionais e as linguagens de programação
		orientadas a objetos
		\item \alert{Simplifica} bastante a escrita de códigos para acessar o banco de dados.
		\item Tipicamente, comandos SQL são dados para criar e modificar tabelas em um
		banco de dados
		\item No Rails, o Model do MVC utiliza algum framework de ORM
	\end{itemize}	
\end{frame}

\begin{frame}[allowframebreaks, t, fragile]{Hora de Colocar a Mão na Massa}
	\begin{itemize}
		\item Inicialize a console do Rails (não a do banco de dados):
		\begin{lstlisting}[style=BashInputBasicStyle]
			~/blog$ rails c
		\end{lstlisting}
		
		\item Exiba os colunas da tabela \verb|posts|
		\begin{lstlisting}[style=BashInputBasicStyle]
			irb(main):004:0> Post.column_names
		\end{lstlisting}
		
		\item Crie um novo \verb|post| e salve no banco de dados
		\begin{lstlisting}[style=BashInputBasicStyle]
			irb(main):005:0> p1 = Post.new
			irb(main):006:0> p1.title="Temperatura em Pocos"
			irb(main):007:0> p1.body="Esta muito frio...";
			irb(main):008:0* p1.save
		\end{lstlisting}
		
		\item Exiba todos os \verb|posts|
		\begin{lstlisting}[style=BashInputBasicStyle]
			irb(main):007:0> Post.all
		\end{lstlisting}
		
		\item Exiba todos os \verb|posts| ordenados pelo título (title)
		\begin{lstlisting}[style=BashInputBasicStyle]
			irb(main):007:0> Post.all.order(title: :asc)
		\end{lstlisting}
		
		\item Exiba o primeiro \verb|post|
		\begin{lstlisting}[style=BashInputBasicStyle]
			irb(main):007:0> Post.first
		\end{lstlisting}
		
		\item Exiba o \verb|post| cujo \verb|id| é 2.
		\begin{lstlisting}[style=BashInputBasicStyle]
			irb(main):007:0> Post.find_by(id: 2)
		\end{lstlisting}
		
		\item Atualize o título do primeiro \verb|post|.
		\begin{lstlisting}[style=BashInputBasicStyle]
			irb(main):007:0> p1=Post.first
			irb(main):007:0> p1.update(title: "um novo titulo")
		\end{lstlisting}
		
		\item Remova do primeiro \verb|post|.
		\begin{lstlisting}[style=BashInputBasicStyle]
			irb(main):007:0> p1=Post.first
			irb(main):007:0> p1.destroy
		\end{lstlisting}
		
	\end{itemize}
\end{frame}